#!/bin/sh -e
#
# 2020 Marko Seric (marko.seric at ssrq-sds-fds.ch)
# 2020 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
# 2020 Beni Ruef (bernhard.ruef at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

quote() { printf "'%s'" "$(printf '%s' "$*" | sed -e "s/'/'\\\\''/g")"; }

base_dir=$(cat "${__object:?}/parameter/dir")

if test -s "${__object:?}/parameter/common-name"
then
	common_name=$(cat "${__object:?}/parameter/common-name")
else
	common_name=${__object_id:?}
fi

state_is=$(cat "${__object:?}/explorer/state")

case ${state_is}
in
	(present)
		exit 0
		;;
	(no-pki)
		# NOTE: The following block is a bit of a "hack" to work around the fact
		#       that requirements in cdist only work for code, but not for
		#       explorers. Due to this, it could happen that the state explorer
		#       executes before the PKI has been initialised.

		# Before doing anything else, check if the pki directory is present.
		cat <<-EOF
		test -d $(quote "${base_dir}/pki") || {
			echo 'Could not find pki directory in ${base_dir}.' >&2
			echo 'Please make sure that __easy_rsa_pki${base_dir} is ran first.' >&2
			exit 1
		}
		EOF
		;;
	(absent)
		# continue below
		;;
esac

opt_params=
# loop through mapping file
while read -r param option
do
	if test -s "${__object:?}/parameter/${param}"
	then
		value=$(head -n 1 "${__object:?}/parameter/${param}")
		opt_params="${opt_params} --${option}=$(quote "${value}")"
	fi
done <"${__type:?}/files/param_mapping.txt"


# Check validity of the supplied parameters
# shellcheck source=/dev/null
. "${__type:?}/files/check_parameter_validity.sh"

check_parameter_validity_digest

if test -s "${__object:?}/parameter/digest"
then
	supplied_value=$(head -n 1 "${__object:?}/parameter/digest")
	opt_params="${opt_params} --digest=$(quote "${supplied_value}")"
fi

printf 'cd %s\n' "$(quote "${base_dir}")"
printf './easyrsa --pki-dir=%s --vars=%s --req-cn=%s %s --batch build-ca nopass\n' \
	"$(quote "${base_dir}/pki")" "$(quote "${base_dir}/vars")" "$(quote "${common_name}")" "${opt_params# }"
