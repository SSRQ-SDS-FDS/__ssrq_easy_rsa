#!/bin/sh -e
#
# 2023 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

shquot() {
	sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<-EOF
	$*
	EOF
}

mkdir "${__object:?}/files"
trap '${uses_stdin:-false} || :>"${__object:?}/stdin"' EXIT


os=$(cat "${__global:?}/explorer/os")
state_is=$(cat "${__object:?}/explorer/state")

pki_dir=$(cat "${__object:?}/parameter/pki")

ca_type=$(cat "${__object:?}/parameter/type")

if test -s "${__object:?}/parameter/common-name"
then
	common_name=$(cat "${__object:?}/parameter/common-name")
else
	common_name=${__object_id:?}
fi

case ${os}
in
	(devuan|debian)
		easyrsa_bin='/usr/share/easy-rsa/easyrsa' ;;
	(*)
		easyrsa_bin='easyrsa' ;;
esac

case ${state_is}
in
	(valid)
		exit 0
		;;
	(expired)
		printf 'The certificate authority "%s" is expired.\n' "${common_name}" >&2
		printf 'Please delete (or move away) the directory "%s" so that a fresh CA can be generated.\n' "${pki_dir}" >&2
		exit 1
		;;
	(no-pki)
		# NOTE: The following block is a bit of a "hack" to work around the fact
		#       that requirements in cdist/skonfig only work for code, but not
		#       for explorers. Due to this, it could happen that the state
		#       explorer executes before the PKI has been initialised.

		# Before doing anything else, check if the --pki is present.
		cat <<-EOF
		${__remote_exec:?} $(shquot "${__target_host:?}") $(shquot "test -d $(shquot "${pki_dir:?}")") || {
			echo 'Could not find a PKI directory structure in ${pki_dir-?}.' >&2
			echo 'Please make sure that __easy_rsa_pki${pki_dir-} is run first.' >&2
			exit 1
		}
		EOF
		;;
	(absent)
		# continue below
		;;
esac

build_opt_params=
# loop through mapping file
while read -r param option
do
	if test -s "${__object:?}/parameter/${param}"
	then
		value=$(head -n 1 "${__object:?}/parameter/${param}")
		build_opt_params="${build_opt_params-} --${option}=$(shquot "${value}")"
	fi
done <"${__type:?}/files/param_mapping.txt"
unset -v param option

build_cmd_opts=''

case ${ca_type}
in
	(root)
		if test -f "${__object:?}/parameter/auto-sign-with"
		then
			echo 'The parameter --auto-sign-with can only be used together with --type sub.' >&2
			exit 1
		fi
		if test -f "${__object:?}/parameter/parent-password"
		then
			echo 'The parameter --parent-password is allowed only together with --type sub.' >&2
			exit 1
		fi
		;;
	(sub)
		build_cmd_opts="${build_cmd_opts-} subca"
		;;
	(*)
		printf 'Invalid --type: %s\n' "${ca_type}" >&2
		exit 1
		;;
esac

# NOTE: easyrsa(1) requires --passin == --passout for the build-ca command
case $(
	test -e "${__object:?}/parameter/password" \
	&& cat "${__object:?}/parameter/password")
in
	(stdin|-)
		build_opt_params="${build_opt_params-} --passin=stdin --passout=stdin"

		# NOTE: since stdin is a stream and easy-rsa requires the password
		#       twice (to generate a private key and to generate the CSR),
		#       we need to duplicate the first line of stdin
		stdin_duplines=1
		;;
	('')
		# no --password or empty --password => nopass
		build_cmd_opts="${build_cmd_opts-} nopass"
		;;
	(*)
		build_opt_params="${build_opt_params-} --passin=file:/dev/null --passout=file:\"\${__object:?}/parameter/password\""
		;;
esac

# build CA command
printf >>"${__object:?}/files/code-remote" '%s --pki-dir=%s --vars=%s --batch --req-cn=%s%s build-ca%s\n' \
	"${easyrsa_bin}" \
	"$(shquot "${pki_dir}")" \
	"$(shquot "${pki_dir}/vars")" \
	"$(shquot "${common_name}")" \
	"${build_opt_params:+ ${build_opt_params# }}" \
	"${build_cmd_opts:+ ${build_cmd_opts# }}"

if test "${ca_type}" = 'sub' -a -f "${__object:?}/parameter/auto-sign-with"
then
	parent_pki=$(cat "${__object:?}/parameter/auto-sign-with")
	easyrsa_parent="${easyrsa_bin:?} --pki-dir=$(shquot "${parent_pki:?}") --vars=$(shquot "${parent_pki:?}/vars") --batch"

	sign_opt_params=
	case $(
		test -e "${__object:?}/parameter/parent-password" \
		&& cat "${__object:?}/parameter/parent-password")
	in
		(stdin|-)
			sign_opt_params="${sign_opt_params-} --passin=stdin --passout=file:/dev/null"
			;;
		('')
			# nothing to do
			;;
		(*)
			sign_opt_params="${sign_opt_params-} --passin=file:\"\${__object:?}/parameter/parent-password\" --passout=file:/dev/null"
			;;
	esac

	ca_default_expire=3650


	# Sign sub CA
	cat >>"${__object:?}/files/code-remote" <<EOF

days=\$(
	set_var() { export \"\$1=\$2\"; }
	EASYRSA_CALLER=1 . $(shquot "${pki_dir:?}/vars")
	echo \"\${EASYRSA_CA_EXPIRE:-$((ca_default_expire))}\"
)

set -e
${easyrsa_parent} import-req $(shquot "${pki_dir:?}/reqs/ca.req") $(shquot "${__object_id:?}") \\
&& ${easyrsa_parent} --days=\$((days))${sign_opt_params-} sign-req ca $(shquot "${__object_id:?}")

cat $(shquot "${parent_pki:?}/issued/${__object_id:?}.crt") >$(shquot "${pki_dir:?}/ca.crt")
cat $(shquot "${parent_pki:?}/ca.crt") $(shquot "${pki_dir:?}/ca.crt") >$(shquot "${pki_dir:?}/chain.pem")
EOF
fi

if test -s "${__object:?}/files/code-remote"
then
	if test -f "${__object:?}/stdin"
	then
		remote_stdin="${__object:?}/stdin"
		uses_stdin=true

		stdin_cmd=$(
			sed -e '1s/^$/-e ""/' -e '1s/^/sed /' -e 's/[0-9][0-9]*/-e &p/g' <<-EOF
			${stdin_duplines-}
			EOF
		)
	fi

	printf '%s %s | %s %s %s\n' \
		"${stdin_cmd:-cat}" \
		"${remote_stdin:-/dev/null}" \
		"${__remote_exec:?}" \
		"$(shquot "${__target_host:?}")" \
		"$(shquot "$(cat "${__object:?}/files/code-remote")")"
fi
