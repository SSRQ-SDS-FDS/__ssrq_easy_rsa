#!/bin/sh -e
#
# 2020 Marko Seric (marko.seric at ssrq-sds-fds.ch)
# 2020 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
# 2020 Beni Ruef (bernhard.ruef at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

quote() { printf "'%s'" "$(printf '%s' "$*" | sed -e "s/'/'\\\\''/g")"; }

base_dir=$(cat "${__object:?}/parameter/dir")

state_should=$(cat "${__object:?}/parameter/state")
state_is=$(cat "${__object:?}/explorer/state")

if test -s "${__object:?}/parameter/common-name"
then
	common_name=$(cat "${__object:?}/parameter/common-name")
else
	common_name=${__object_id:?}
fi

# Check validity of the supplied parameters
# shellcheck source=/dev/null
. "${__type:?}/files/check_parameter_validity.sh"

check_parameter_validity_digest
check_parameter_validity_usealgo

## Check required parameters for sanity
cert_type=$(cat "${__object:?}/parameter/cert-type")
case ${cert_type}
in
	(server|client)
		;;  # These two are okay
	(*)
		echo 'cert-type should be either "server" or "client".' >&2
		exit 1
		;;
esac


# NOTE: The following block is a bit of a "hack" to work around the fact that
#       requirements in cdist only work for code, but not for explorers. Due to
#       this, it could happen that the state explorer executes before the PKI
#       has been initialised.
if test "${state_is}" = 'no-pki'
then
	# Before doing anything else, check if the pki directory has been
	# initialised in the meantime if the explorer didn't find it.
	cat <<-EOF
	test -d $(quote "${base_dir}/pki") || {
		echo 'Could not find pki directory in ${base_dir}.' >&2
		echo 'Please make sure that __easy_rsa_pki${base_dir} is ran first.' >&2
		exit 1
	}
	EOF

	# NOTE: If the PKI has been freshly initialised, the cert can't have been
	#       generated previously, so it must be 'absent'.
	state_is='absent'
fi

easyrsa_cmd="./easyrsa --pki-dir=$(quote "${base_dir}/pki") --vars=$(quote "${base_dir}/vars") --batch"

case ${state_should}
in
	(signed|valid)
		if test "${state_is}" = 'valid' \
			|| test "${state_should}" = 'signed' -a "${state_is}" = 'expired'
		then
			exit 0
		fi

		printf 'cd %s\n' "$(quote "${base_dir}")"

		if test "${state_is}" = 'absent'
		then
			req_options=
			while read -r param option
			do
				test -s "${__object:?}/parameter/${param}" || continue

				value=$(head -n 1 "${__object:?}/parameter/${param}")
				req_options="${req_options} --${option}=$(quote "${value}")"
			done <"${__type:?}/files/param_mapping.txt"
			unset param option value

			printf '%s --req-cn=%s %s gen-req %s nopass\n' \
				"${easyrsa_cmd}" "$(quote "${common_name}")" "${req_options# }" "$(quote "${__object_id:?}")"
		fi

		sign_options=
		if test -s "${__object:?}/parameter/cert-expiration-days"
		then
			value=$(head -n 1 "${__object:?}/parameter/cert-expiration-days")
			# shellcheck disable=SC2234
			if ! (test $((value > 0)) -gt 0) 2>&-
			then
				printf 'Invalid --cert-expiration-days: %s\n' "${value}" >&2
				printf 'Value must be a positive integer.\n' >&2
				exit 1
			fi
			sign_options="${sign_options} --days=$(quote "${value}")"
		fi
		unset value

		printf '%s %s sign-req %s %s\n' \
			"${easyrsa_cmd}" "${sign_options# }" "${cert_type}" "$(quote "${__object_id:?}")"
		;;
	(revoked)
		if test "${state_is}" = 'absent'
		then
			exit 0
		fi

		printf 'cd %s\n' "$(quote "${base_dir}")"
		printf '%s revoke %s \n' "${easyrsa_cmd}" "$(quote "${__object_id:?}")"
		printf '%s gen-crl\n' "${easyrsa_cmd}"
		;;
esac
